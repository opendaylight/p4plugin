/*
 * Copyright Â© 2017 zte and others.  All rights reserved.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v1.0 which accompanies this distribution,
 * and is available at http://www.eclipse.org/legal/epl-v10.html
 */
package org.opendaylight.p4plugin.core.impl;

import com.google.common.base.Preconditions;
import com.google.protobuf.ByteString;
import com.google.protobuf.TextFormat;
import org.opendaylight.p4plugin.p4info.proto.*;
import org.opendaylight.p4plugin.p4runtime.proto.FieldMatch;
import org.opendaylight.p4plugin.p4runtime.proto.TableAction;
import org.opendaylight.p4plugin.p4runtime.proto.TableEntry;
import org.opendaylight.yang.gen.v1.urn.opendaylight.p4plugin.table.rev170808.TableEntryInput;
import org.opendaylight.yang.gen.v1.urn.opendaylight.p4plugin.table.rev170808.table.entry.input.MatchFields;
import org.opendaylight.yang.gen.v1.urn.opendaylight.p4plugin.table.rev170808.table.entry.input.Params;
//import org.opendaylight.yang.gen.v1.urn.opendaylight.p4plugin.table.rev170808.action.info.Params;
//import org.opendaylight.yang.gen.v1.urn.opendaylight.p4plugin.table.rev170808.match.items.MatchFields;


import java.io.*;
import java.util.List;

public abstract class Utils {
    /**
     * Parses the device config and runtime resource files generated by compiler.
     * For example:
     * p4c-bm2-ss simple_router.p4 --p4v 14 --toJSON simple_router.json
     * p4c-bm2-ss simple_router.p4 --p4v 14 --p4-runtime-file simple_router.proto.txt --p4runtime-format text
     */
    public static P4Info parseRuntimeInfo(String file) throws IOException {
        Preconditions.checkArgument(file != null, "Runtime Info file is null.");
        Reader reader = null;
        P4Info.Builder info = P4Info.newBuilder();
        try {
            reader = new FileReader(file);
            TextFormat.merge(reader, info);
            return info.build();
        } finally {
            if (reader != null) {
                reader.close();
            }
        }
    }

    public static ByteString parseDeviceConfigInfo(String file) throws IOException {
        Preconditions.checkArgument(file !=  null, "Device config file is null.");
        InputStream input = new FileInputStream(new File(file));
        return ByteString.readFrom(input);
    }
    
    /**
     *
     * @param str input param, an ipv4 address or a mac address or a number
     * @param len binary width
     * @return
     */
    public static byte[] strToByteArray(String str, int len) {
        String[] strArray = null;
        byte[] byteArray = null;

        /* regular ipv4 address match (1~255).(0~255).(0~255).(0~255) */
        if (str.matches("([1-9]|[1-9]\\d|1\\d{2}|2[0-4]|25[0-5])\\."
                + "((\\d|[1-9]\\d|1\\d{2}|2[0-4]\\d|25[0-5])\\.){2}"
                + "(\\d|[1-9]\\d|1\\d{2}|2[0-4]\\d|25[0-5])")) {
            strArray = str.split("\\.");
            byteArray = new byte[strArray.length];
            assert (len == strArray.length);
            for (int i = 0; i < strArray.length; i++) {
                byteArray[i] = (byte) Integer.parseInt(strArray[i]);
            }
        } else if (str.matches("([0-9a-fA-F]{1,2}:){5}[0-9a-fA-F]{1,2}")) { /* mac address,aa:bb:cc:dd:ee:ff,1:2:3:4:5:6 */
            strArray = str.split(":");
            byteArray = new byte[strArray.length];
            assert (len == strArray.length);
            for (int i = 0; i < strArray.length; i++) {
                byteArray[i] = (byte) Integer.parseInt(strArray[i], 16);
            }
        } else {
            int value = Integer.parseInt(str);
            byteArray = new byte[len];
            for (int i = 0; i < len; i++) {
                byteArray[i] = (byte) (value >> ((len - i - 1) * 8) & 0xFF);
            }
        }
        return byteArray;
    }

    /**
     * Get table id by table name from p4 runtime info;
     */
    public static int getTableId(P4Info runTimeInfo, String tableName) {
        List<Table> list = runTimeInfo.getTablesList();

        for (Table table : list) {
            Preamble preamble = table.getPreamble();
            if (preamble.getName().equals(tableName)) {
                return preamble.getId();
            }
        }
        return -1;
    }

    /**
     * Get match field id by table name and match field name from p4 runtime info;
     */
    public static int getMatchFieldId(P4Info runTimeInfo, String tableName, String matchFieldName) {
        List<Table> list = runTimeInfo.getTablesList();
        Table table = null;

        for(Table t : list) {
            if(t.getPreamble().getName().equals(tableName)) { table = t; break; }
        }

        List<MatchField> mfList = table.getMatchFieldsList();
        for(MatchField mf : mfList) {
            if (mf.getName().equals(matchFieldName)) { return mf.getId(); }
        }
        return  -1;
    }

    /**
     * Get correct match field width, round to the nearest integer.
     */
    public static int getMatchFieldWidth(P4Info runTimeInfo, String tableName, String matchFieldName) {
        List<Table> list = runTimeInfo.getTablesList();
        Table table = null;

        for(Table t : list) {
            if(t.getPreamble().getName().equals(tableName)) { table = t; break; }
        }

        List<MatchField> mfList = table.getMatchFieldsList();
        for(MatchField mf : mfList) {
            if (mf.getName().equals(matchFieldName)) {
                return (mf.getBitwidth() + 7) / 8;
            }
        }
        return  -1;
    }

    /**
     * Get action id ny action name.
     */
    public static int getActionId(P4Info runTimeInfo, String actionName) {
        List<org.opendaylight.p4plugin.p4info.proto.Action> actionList = runTimeInfo.getActionsList();
        for (org.opendaylight.p4plugin.p4info.proto.Action action : actionList) {
            Preamble preamble = action.getPreamble();
            if (preamble.getName().equals(actionName)) { return action.getPreamble().getId(); }
        }
        return -1;
    }

    /**
     * Get a concrete param id, a action may contain many params
     */
    public static int getParamId(P4Info runTimeInfo, String actionName, String paramName) {
        List<org.opendaylight.p4plugin.p4info.proto.Action> actionList = runTimeInfo.getActionsList();
        for (org.opendaylight.p4plugin.p4info.proto.Action action : actionList) {
            Preamble preamble = action.getPreamble();
            if (!preamble.getName().equals(actionName)) { continue; }
            for (org.opendaylight.p4plugin.p4info.proto.Action.Param param : action.getParamsList()) {
                if (param.getName().equals(paramName)) { return param.getId(); }
            }
        }
        return -1;
    }

    /**
     * Get correct param width, round to the nearest integer.
     */
    public static int getParamWidth(P4Info runTimeInfo, String actionName, String paramName) {
        List<org.opendaylight.p4plugin.p4info.proto.Action> actionList = runTimeInfo.getActionsList();
        for (org.opendaylight.p4plugin.p4info.proto.Action action : actionList) {
            Preamble preamble = action.getPreamble();
            if (!preamble.getName().equals(actionName)) { continue; }
            for (org.opendaylight.p4plugin.p4info.proto.Action.Param param : action.getParamsList()) {
                if (param.getName().equals(paramName)) {
                    return (param.getBitwidth() + 7) / 8;
                }
            }
        }
        return -1;
    }

    private static org.opendaylight.p4plugin.p4runtime.proto.Action.Builder newActionBuilder() {
        return org.opendaylight.p4plugin.p4runtime.proto.Action.newBuilder();
    }

    private static org.opendaylight.p4plugin.p4runtime.proto.Action.Param.Builder newParamBuilder() {
        return org.opendaylight.p4plugin.p4runtime.proto.Action.Param.newBuilder();
    }

    /**
     * Human-readable entry metadata serialize to protobuf message
     */
    public static TableEntry toMessage(P4Info runtimeInfo, TableEntryInput input) {
        Preconditions.checkArgument(runtimeInfo != null, "Runtime info is null.");
        String tableName = input.getTable();
        List<MatchFields> fields = input.getMatchFields();
        String actionName = input.getAction();
        List<Params> params = input.getParams();

        int tableId = getTableId(runtimeInfo, tableName);
        int actionId = getActionId(runtimeInfo, actionName);

        org.opendaylight.p4plugin.p4runtime.proto.Action.Builder actionBuilder = newActionBuilder();
        actionBuilder.setActionId(actionId);

        for (Params k : input.getParams()) {
            org.opendaylight.p4plugin.p4runtime.proto.Action.Param.Builder paramBuilder = newParamBuilder();
            int paramId = getParamId(runtimeInfo, actionName, k.getName());
            paramBuilder.setParamId(paramId);
            int paramWidth = getParamWidth(runtimeInfo, actionName, k.getName());
            byte[] a = strToByteArray(k.getValue(), paramWidth);
            ByteString b = ByteString.copyFrom(a);
            paramBuilder.setValue(b);
            actionBuilder.addParams(paramBuilder.build());
        }

        TableAction.Builder tableActionBuilder = TableAction.newBuilder();
        tableActionBuilder.setAction(actionBuilder.build());

        TableEntry.Builder tableEntryBuilder = TableEntry.newBuilder();
        tableEntryBuilder.setTableId(tableId);

        tableEntryBuilder.setAction(tableActionBuilder.build());

        for (MatchFields f : fields) {
            FieldMatch.Builder fieldMatchBuilder = FieldMatch.newBuilder();
            int matchFieldId = getMatchFieldId(runtimeInfo, tableName, f.getField());
            fieldMatchBuilder.setFieldId(matchFieldId);
            switch(f.getMatchType()) {
                case EXACT: {
                    FieldMatch.Exact.Builder exactBuilder = FieldMatch.Exact.newBuilder();
                    exactBuilder.setValue(ByteString.copyFrom(strToByteArray(f.getValue(), getMatchFieldWidth(runtimeInfo,tableName, f.getField()))));
                    fieldMatchBuilder.setExact(exactBuilder.build());
                    break;
                }
                case TERNARY:
                    break;
                case LPM: {
                    FieldMatch.LPM.Builder lpmBuilder = FieldMatch.LPM.newBuilder();
                    String value = f.getValue();
                    String ip = null;
                    int prefixLen = 0;
                    if (value.matches("([1-9]|[1-9]\\d|1\\d{2}|2[0-4]|25[0-5])\\."
                            + "((\\d|[1-9]\\d|1\\d{2}|2[0-4]\\d|25[0-5])\\.){2}"
                            + "(\\d|[1-9]\\d|1\\d{2}|2[0-4]\\d|25[0-5])/([1-9]|[1-2][0-9]|3[0-2])")) {
                        String[] result = value.split("/");
                        ip = result[0];
                        prefixLen = Integer.parseInt(result[1]);
                        lpmBuilder.setValue(ByteString.copyFrom(strToByteArray(ip, getMatchFieldWidth(runtimeInfo, tableName, f.getField()))));
                        lpmBuilder.setPrefixLen(prefixLen);
                        fieldMatchBuilder.setLpm(lpmBuilder.build());
                    }
                    break;
                }
                case RANGE:
                    break;
                case VALID:
                    break;
                default:
                    break;
            }

            tableEntryBuilder.addMatch(fieldMatchBuilder.build());
        }
        return tableEntryBuilder.build();
    }
}
